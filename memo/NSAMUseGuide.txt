アセンブリするコマンド
    nasm つけたい名前
    実際にboot.sという名前を付ける場合(今後基本的にはboot.sと名付ける)
        nasm boot.s
    アセンブル結果はエラーがなければboot.sというファイル名で保存される
        がこれらはCPU向けの機械語かつバイナリファイルなので専用のバイナリエディタが必要
        その結果をテキストファイルに出力するオプションが用意されている
            リスティングファイルと呼ばれNASMの場合はオプション[-l]を指定
            nasm boot.s -l boot.lst

ラベル
    ラベルはアセンブル対象全てにおいて重複することはできない
    ラベルには以下の二種類がある
        ローカルラベル
            NASMではそれほど強い意味を持たないラベルや局所的な条件分岐でのジャンプ先にローカルラベルが使える
                [.]で始まる
                直前までに指定されたラベルの範囲内のみ使用可能
        グローバルラベル
            グローバルラベルはいかなるところからアクセスすることができる
                [.]で始まらない
    例:
1   global_label_A:
2   .local_label:
3       jmp .local_label                ; 2行目にジャンプ
4
5   global_label_B:
6       jmp .local_label                ; 8行目にジャンプ
7       jmp global_label_A.local_label  ; 2行目にジャンプ
8   .local_label:

基数
    NASMが認識する数字は書き方次第で2, 8, 10, 16進数と使い分けできる
    [_]は認識しないため見やすいように好きなところに入れることができる
    プレフィックス
        前に記述
        0?で記述
    サフィックス
        後ろに記述
        末尾一文字のみで表示
    進数    プレフィックス    サフィックス    使用例
    2       0B              B               0b10, 1000_0010B
    8       0O              O               0o10, 10o       (オー, ゼロではない)
    10      0D              D               0d10, 10d, 010
    16      0X              H               0x10, 10h

プリプロセッサ
    アセンブル作業の前に行われる前処理。
    アセンブル条件を指定する事ができる
    プリプロセッサはアセンブラに対する司令なのでディレクティブに分類される。
    [%]で始まる

    また例での表記は基本的に一番左から行数, 変換後行数, データに格納されている数字, アセンブリ言語という並びになっている
        例:
    行数 変換後行数 データに格納されている数字 変換前のアセンブリ言語
    1   00000000   01                      db suuzi 1

    置き換え(%define)
        例:
    1                   %define VALUE   3
    2   00000000 03         db  VALUE

        この例ではVALUE = 3として定義している。
        ソースファイル上での複数の箇所で同じ値を定義しているのであればマクロを利用して修正漏れを防げる。

        四則演算の結果も代入可能
        例:
    1                   %define VALUE   3*3
    2   00000000 09         db  VALUE

    引数指定
        例:
    1               %define calc(x) (3 * (x))
    2   00000000 06     db  calc(2)

        この例では引数に指定された値を3倍にする。
        ただし計算を行う場合は意図しない結合が行われないように()でくくるのが一般的

    繰り返し(%rep)
        繰り返しは[%rep <回数>]で[%endrep]に挟まれた行を回数分だけ繰り返す
        例:
    1                   %rep
    2                       db  0
    3                   %endrep
    4   00000000 00  <1> db 0
    5   00000001 00  <2> db 0
    6   00000002 00  <3> db 0

        <1>はマクロの中からマクロを呼び出したときに入れ子になった回数を示すもの
        また一行で繰り返しを途中終了させれる break文と同じ動作 [%exitrep]

    プリプロセッサ変数(%assign)
        プリプロセッサ処理中にのみ有効な変数を定義
        値を設定及び参照することができる。
            つまりはそれ以降のプリプロセッサ処理に変数を設定することができる
        例:
    1                   %assign i 3
    2                   %rep 3
    3                       db i
    4                       %assign i i+3
    5                   %endrep
    6   00000000 03 <1> db i
    7               <1> %assign i i+3
    8   00000001 06 <1> db i
    9               <1> %assign i i+3
    10  00000002 09 <1> db i
    11              <1> %assign i i+3

    条件付きアセンブル(%if)
        条件が成立したときにだけアセンブルを行うもの
        %if <条件> ~ %endifまでが対象
        条件を追加する場合は%elif <条件>を利用
        除外する場合は%elseを利用
        例:
    1                   %if 1
    2   00000000    41      db 'A'
    3                   %else
    4                       db 'B'
    5                   %endif
        上の例では必ずTrueになるのでA(文字コードから変換すると41)である

        例:
    1                   %assign i 3
    2                   %rep 3
    3                       %if 5 < if
    4                           db 5
    5                       %else
    6                           db i
    7                       %endif
    8                       %assign i i+3
    9                   %endrep
    10              <1> %if 5 < i
    11              <1> db 5
    12              <1> %else
    13  00000000 03 <1> db i
    14              <1> %endif
    15              <1> %assign i i+3
    16              <1> %if 5 < i
    17  00000001 05 <1> db 5
    18              <1> %else
    19              <1> db i
    20              <1> %endif
    21              <1> %assign i i+3
    22              <1> %if 5 < i
    23  00000002 05 <1> db 5
    24              <1> %else
    25              <1> db i
    26              <1> %endif
    27              <1> %assign i i+3

    NASMで使用可能な演算子
        ==  等しい
        !=  等しくない
        <   未満
        >   より大きい
        <=  以下
        >=  以上
        &&  AND
        ||  OR
        ^^  XOR

    複数行に渡るマクロ(%macro)
        複数行に渡るマクロを定義する場合は[%macro <マクロ名> <引数の数>]で定義, [%endmacro]でマクロの終わりを定義する
        引数１つ目は%1, 引数２つ目は%2となる
        渡す引数の数はマクロで定義した数と一致しなければいけない
        もしカンマで区切られた複数の値を引数として渡したいのであれば{}でくくる
            {'A', 'B', 'C'}のようなことができる

        例:
    1                   %macro sum 2
    2                       mov ax, 0
    3                       add ax, %1
    4                       add ax, %2
    5                   %endmacro
    6
    7                       sum bx, cx
    8   00000000    <1> mov ax, 0
    9   00000003    <1> add ax, %1
    10  00000005    <1> add ax, %2

    マクロ内ローカルラベル(%%)
        マクロ内でのみ有効なラベルで[%%<ラベル名>:]で定義可能
        次の例ではゼロフラグがセットされているときにRET命令を実行するマクロ
        例：
    1                       %macro retz 0 //マクロretzを定義, 引数の数は0個
    2                           jnz %%skip
    3                               ret
    4                           %%skip:
    5                       %endmacro
    6
    7                           retz
    7   00000000 7501   <1> jnz %%skip
    7   00000002 C3     <1> ret
    7                   <1> %%skip:
    8                           retz
    9   00000003 7501   <1> jnz %%skip
    10  00000005 C3     <1> ret
    11                  <1> %%skip:

    可変引数
        引数を一つ以上の個数とすることができる
        [1-*]
        %0にマクロに対して渡された引数の数を知ることができる。
        %{x:y}という記述を用いて範囲指定することもできる
        例:
    1                       %macro v_db 1-*
    2                           db %0
    3                           db %{1:2}
    4                           db %{4:3}
    5                           db %{-1:-2}
    6                       %endmacro
    7
    8                           v_db    'A', 'B', 'C', 'D', 'E'
    9   00000000 05     <1> db %0
    10  00000001 4142   <1> db %1:2
    11  00000003 4443   <1> db %4:3
    12  00000005 4544   <1> db %-1:-2
        マクロに渡される引数の参照方法
        インデックス    1   2   3   4   5
                      -5  -4  -3  -2  -1
        引数           A   B   C   D   E
        もし引数の数に関わらず最後の引数のみを指定したければ[%{-1:-1}]で指定できる

    引数の回転(%rotate)
        マクロに与えられた最初の引数は%1でアクセスできるが[%rotate <数値>]を使用すると引数の位置をずらすことができる
        与えた数字がプラスであれば左, マイナスなら右にマクロに対して渡されたすべての引数が回転します
