アセンブリするコマンド
    nasm つけたい名前
    実際にboot.sという名前を付ける場合(今後基本的にはboot.sと名付ける)
        nasm boot.s
    アセンブル結果はエラーがなければboot.sというファイル名で保存される
        がこれらはCPU向けの機械語かつバイナリファイルなので専用のバイナリエディタが必要
        その結果をテキストファイルに出力するオプションが用意されている
            リスティングファイルと呼ばれNASMの場合はオプション[-l]を指定
            nasm boot.s -l boot.lst

ラベル
    ラベルはアセンブル対象全てにおいて重複することはできない
    ラベルには以下の二種類がある
        ローカルラベル
            NASMではそれほど強い意味を持たないラベルや局所的な条件分岐でのジャンプ先にローカルラベルが使える
                [.]で始まる
                直前までに指定されたラベルの範囲内のみ使用可能
        グローバルラベル
            グローバルラベルはいかなるところからアクセスすることができる
                [.]で始まらない
    例:
1   global_label_A:
2   .local_label:
3       jmp .local_label                ; 2行目にジャンプ
4
5   global_label_B:
6       jmp .local_label                ; 8行目にジャンプ
7       jmp global_label_A.local_label  ; 2行目にジャンプ
8   .local_label:

基数
    NASMが認識する数字は書き方次第で2, 8, 10, 16進数と使い分けできる
    [_]は認識しないため見やすいように好きなところに入れることができる
    プレフィックス
        前に記述
        0?で記述
    サフィックス
        後ろに記述
        末尾一文字のみで表示
    進数    プレフィックス    サフィックス    使用例
    2       0B              B               0b10, 1000_0010B
    8       0O              O               0o10, 10o       (オー, ゼロではない)
    10      0D              D               0d10, 10d, 010
    16      0X              H               0x10, 10h

プリプロセッサ
    アセンブル作業の前に行われる前処理。
    アセンブル条件を指定する事ができる
    プリプロセッサはアセンブラに対する司令なのでディレクティブに分類される。
    [%]で始まる

    置き換え(%define)
        例:
    1                   %define VALUE   3
    2   00000000 03         db  VALUE

        この例ではVALUE = 3として定義している。
        ソースファイル上での複数の箇所で同じ値を定義しているのであればマクロを利用して修正漏れを防げる。

        四則演算の結果も代入可能
        例:
    1                   %define VALUE   3*3
    2   00000000 09         db  VALUE

    引数指定
        例:
    1               %define calc(x) (3 * (x))
    2   00000000 06     db  calc(2)

        この例では引数に指定された値を3倍にする。
        ただし計算を行う場合は意図しない結合が行われないように()でくくるのが一般的

    繰り返し(%rep)
        繰り返しは[%rep <回数>]で[%endrep]に挟まれた行を回数分だけ繰り返す
        例:
    1                   %rep
    2                       db  0
    3                   %endrep
    4   00000000 00  <1> db 0
    5   00000001 00  <2> db 0
    6   00000002 00  <3> db 0

        <1>はマクロの中からマクロを呼び出したときに入れ子になった回数を示すもの

    プリプロセッサ変数(%assign)
        プリプロセッサ処理中にのみ有効な変数を定義
        値を設定及び参照することができる。
            つまりはそれ以降のプリプロセッサ処理に変数を設定することができる
        例:
    1                   %assign i 3
    2                   %rep 3
    3                       db i
    4                       %assign i i+3
    5                   %endrep
    6   00000000 03 <1> db i
    7               <1> %assign i i+3
    8   00000001 06 <1> db i
    9               <1> %assign i i+3
    10  00000002 09 <1> db i
    11              <1> %assign i i+3